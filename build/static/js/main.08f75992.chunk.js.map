{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","style","color","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","axios","get","process","res","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","name","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAoBeA,EAjBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,sBAAKC,UAAU,aAAf,UACE,6BAAKJ,IACL,6BACGG,EAAYE,KAAI,SAACC,GAAD,OACf,6BAAKA,EAAWC,YAGpB,8BACE,sBAAMC,MAAO,CAAEC,MAAO,QAAtB,wBADF,IACqDR,KAErD,qBAAKS,IAAKR,EAAOS,IAAKX,QC+CbY,EAzDH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,qBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,0CACmBN,EADnB,mBACmCO,WADnC,oBAC2EA,qCAF7E,OACVC,EADU,OAIhBX,EAAWW,EAAIC,KAAKC,MACpBC,QAAQC,IAAIJ,EAAIC,KAAKC,MALL,2CAAH,qDAiBf,OACE,mCACE,sBAAKxB,UAAU,MAAf,UACE,uBAAMA,UAAU,cAAc2B,SARlB,SAACC,GACjBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAKN,UACE,uBACEb,UAAU,aACV8B,KAAK,OACLC,MAAOnB,EACPoB,SAjBW,SAACJ,GACpBf,EAAUe,EAAEK,OAAOF,QAiBXG,KAAMtB,IAER,wBAAQkB,KAAK,SAAS9B,UAAU,gBAAhC,uBAIF,qBAAKA,UAAU,UAAf,SACGU,EAAQT,KAAI,SAACkC,GAAD,OACX,cAAC,EAAD,CAEEvC,MAAOuC,EAAOA,OAAOC,MACrBvC,SAAUsC,EAAOA,OAAOtC,SACxBC,MAAOqC,EAAOA,OAAOrC,MACrBC,YAAaoC,EAAOA,OAAOpC,aAJtBoC,EAAOA,OAAOC,kBCrClBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.08f75992.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className=\"recipe_box\">\r\n      <h1>{title}</h1>\r\n      <ol>\r\n        {ingredients.map((ingredient) => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>\r\n        <span style={{ color: \"gray\" }}>Calories: </span> {calories}\r\n      </p>\r\n      <img src={image} alt={title} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState();\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipe();\n  }, [query]);\n\n  const getRecipe = async () => {\n    const res = await axios.get(\n      `https://api.edamam.com/search?q=${query}&app_id=${process.env.React_App_APP_ID}&app_key=${process.env.React_App_APP_KEY}`\n    );\n    setRecipes(res.data.hits);\n    console.log(res.data.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n  return (\n    <>\n      <div className=\"App\">\n        <form className=\"search_form\" onSubmit={getSearch}>\n          <input\n            className=\"search_bar\"\n            type=\"text\"\n            value={search}\n            onChange={updateSearch}\n            name={search}\n          />\n          <button type=\"submit\" className=\"search_button\">\n            Search\n          </button>\n        </form>\n        <div className=\"recipes\">\n          {recipes.map((recipe) => (\n            <Recipe\n              key={recipe.recipe.label}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}